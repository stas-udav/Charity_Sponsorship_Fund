{"uid":"3518d648685a5dcb","name":"test_input[field_data_dict0]","fullName":"tests.test_contact_form#test_input","historyId":"84b9e87c4ff24b637ec08725cfa094a8","time":{"start":1708374512963,"stop":1708374513296,"duration":333},"status":"failed","statusMessage":"AssertionError: Phone contains letter or empty\nassert ('' is not None and None)\n +  where None = <function match at 0x0000022D06B0A200>('^\\\\+?\\\\d+$', '')\n +    where <function match at 0x0000022D06B0A200> = re.match","statusTrace":"field_data_dict = {'email': 'johndoe@example.com', 'message': 'This is my message', 'name': 'John Doe', 'phone': 'sdfsfsdf'}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b5b60065fd1f629b655a35536e3cc209\")>\n\n    @pytest.mark.parametrize(\"field_data_dict\", [{\n            \"name\": \"John Doe\",\n            \"phone\": \"sdfsfsdf\",\n            \"email\": \"johndoe@example.com\",\n            \"message\": \"This is my message\"\n        }])\n    def test_input(field_data_dict, driver):\n        contact_page = ContactForm(driver)\n        input_name = contact_page.input_field(\"//input[@placeholder='Your Name*']\")\n        input_name.send_keys(field_data_dict[\"name\"])\n        value_name = input_name.get_attribute(\"value\")\n        # Input name field contains letters\n        assert value_name is not None and re.match(r'\\D+', value_name)\n        input_phone = contact_page.input_field(\"//input[@placeholder='Phone number*']\")\n        input_phone.send_keys(field_data_dict[\"phone\"])\n        value_phone = input_phone.get_attribute(\"value\")\n        # Input phone field contains digits and/or \"+\"\n        allure.attach(driver.get_screenshot_as_png(), name=\"input_phone_field\", attachment_type=allure.attachment_type.PNG)\n>       assert value_phone is not None and re.match(r'^\\+?\\d+$', value_phone) and not re.search(r'[a-zA-Z]', value_phone), \"Phone contains letter or empty\"\nE       AssertionError: Phone contains letter or empty\nE       assert ('' is not None and None)\nE        +  where None = <function match at 0x0000022D06B0A200>('^\\\\+?\\\\d+$', '')\nE        +    where <function match at 0x0000022D06B0A200> = re.match\n\ntests\\test_contact_form.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1708374507555,"stop":1708374508800,"duration":1245},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Phone contains letter or empty\nassert ('' is not None and None)\n +  where None = <function match at 0x0000022D06B0A200>('^\\\\+?\\\\d+$', '')\n +    where <function match at 0x0000022D06B0A200> = re.match","statusTrace":"field_data_dict = {'email': 'johndoe@example.com', 'message': 'This is my message', 'name': 'John Doe', 'phone': 'sdfsfsdf'}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b5b60065fd1f629b655a35536e3cc209\")>\n\n    @pytest.mark.parametrize(\"field_data_dict\", [{\n            \"name\": \"John Doe\",\n            \"phone\": \"sdfsfsdf\",\n            \"email\": \"johndoe@example.com\",\n            \"message\": \"This is my message\"\n        }])\n    def test_input(field_data_dict, driver):\n        contact_page = ContactForm(driver)\n        input_name = contact_page.input_field(\"//input[@placeholder='Your Name*']\")\n        input_name.send_keys(field_data_dict[\"name\"])\n        value_name = input_name.get_attribute(\"value\")\n        # Input name field contains letters\n        assert value_name is not None and re.match(r'\\D+', value_name)\n        input_phone = contact_page.input_field(\"//input[@placeholder='Phone number*']\")\n        input_phone.send_keys(field_data_dict[\"phone\"])\n        value_phone = input_phone.get_attribute(\"value\")\n        # Input phone field contains digits and/or \"+\"\n        allure.attach(driver.get_screenshot_as_png(), name=\"input_phone_field\", attachment_type=allure.attachment_type.PNG)\n>       assert value_phone is not None and re.match(r'^\\+?\\d+$', value_phone) and not re.search(r'[a-zA-Z]', value_phone), \"Phone contains letter or empty\"\nE       AssertionError: Phone contains letter or empty\nE       assert ('' is not None and None)\nE        +  where None = <function match at 0x0000022D06B0A200>('^\\\\+?\\\\d+$', '')\nE        +    where <function match at 0x0000022D06B0A200> = re.match\n\ntests\\test_contact_form.py:43: AssertionError","steps":[],"attachments":[{"uid":"b23b96b1b22283c0","name":"input_phone_field","source":"b23b96b1b22283c0.png","type":"image/png","size":139863}],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1708374513336,"stop":1708374515424,"duration":2088},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_contact_form"},{"name":"host","value":"udav_comp"},{"name":"thread","value":"21924-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_contact_form"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"field_data_dict","value":"{'name': 'John Doe', 'phone': 'sdfsfsdf', 'email': 'johndoe@example.com', 'message': 'This is my message'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3da4340f623d482e","status":"failed","statusDetails":"AssertionError: Phone contains letter or empty\nassert ('sdfsfsdf' is not None and None)\n +  where None = <function match at 0x000001F52574A200>('^\\\\+?\\\\d+$', 'sdfsfsdf')\n +    where <function match at 0x000001F52574A200> = re.match","time":{"start":1708374424194,"stop":1708374424423,"duration":229}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3518d648685a5dcb.json","parameterValues":["{'name': 'John Doe', 'phone': 'sdfsfsdf', 'email': 'johndoe@example.com', 'message': 'This is my message'}"]}